var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"LessUnitful","category":"page"},{"location":"#LessUnitful","page":"Home","title":"LessUnitful","text":"(Image: linux-macos-windows) (Image: ) (Image: ) (Image: Aqua QA)\n\nLessUnitful\n\nSmall package which provides convenience tools to access quantities based on Unitful.jl and PhysicalConstants.jl in an \"unitless\" way – as floating point numbers representing the numerical value of a quantity expressed in preferred units (SI base units by default). This appears to be useful in projects using code which cannot easily made unit-aware, e.g. due to the use of sparse linear algebra. \n\nBreaking changes in v1.1\n\nUnitful.@u_str is not anymore re-exported. Instead,  using Unitful should be used.\nThe functor method  (::Unitful.FreeUnits)(x::Real) is now exported by the submodule LessUnitful.MoreUnitful. So if  something like x=1|>u\"cm\" is required (which should give 100cm because 1 is assumed to be a value in the SI Basic units in this method), one needs LessUnitful.MoreUnitful. Due to the type piracy behind this, using this in packages should be avoided. \nCalculation of physical constants like ph\"N_A*e\" has been removed as this depended on undocumented internals of Unitful.jl. Just replace this by  ph\"N_A\"*ph\"e\".\n\n\n\n\n\n","category":"module"},{"location":"#Why-this-package-?","page":"Home","title":"Why this package ?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"We demonstrate this with an example. Assume we have a nice function which calculates with unitful values:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Unitful\n\njulia> unitful_lsum(a::Unitful.Length, b::Unitful.Length) = a+b;\n\njulia> unitful_lsum(10.0u\"cm\",1.0u\"m\")\n1.1 m","category":"page"},{"location":"","page":"Home","title":"Home","text":"Now we assume that there is a faster way to calculate the same sum with the caveat that the implementation does not support unitful values, e.g. because it uses a binary package written in C. (here, we just use a mock example, in reality, think about sparse linear algebra)","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> fast_lsum(a::Real, b::Real)=a+b;\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"If we want to use this method in a faster implementation of unitful_area, we might try to use Unitful.ustrip to strip the units and to attach them back somehow afterwards. However, before stripping the arguments need to be brought to a common unit. Canonically, this is the preferred unit of the corresponding dimension provided by Unitful (SI base unit by default).","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> function fast_unitful_lsum(a::Unitful.Length, b::Unitful.Length)\n           a_stripped=a |> upreferred |> ustrip\n           b_stripped=b |> upreferred |> ustrip\n           fast_lsum(a_stripped, b_stripped)* unit(upreferred(a))\n       end;\n\njulia> fast_unitful_lsum(10.0u\"cm\",1.0u\"m\")\n1.1 m","category":"page"},{"location":"","page":"Home","title":"Home","text":"LessUnitful.jl provides","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using LessUnitful, LessUnitful.MoreUnitful\n\njulia> function fast_lessunitful_lsum(a::Unitful.Length, b::Unitful.Length)\n           a_stripped=a |> unitfactor\n           b_stripped=b |> unitfactor\n           fast_lsum(a_stripped, b_stripped) |> u\"m\"\n       end;\n\njulia> fast_lessunitful_lsum(10.0u\"cm\",1.0u\"m\")\n1.1 m","category":"page"},{"location":"","page":"Home","title":"Home","text":"Also it helps to support a complete \"less unitful\" workflow:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> fast_lsum(10.0ufac\"cm\",1.0ufac\"m\")\n1.1","category":"page"},{"location":"","page":"Home","title":"Home","text":"It is also possible to attach arbitrary units back in a way consistent to the preferred units:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> fast_lsum(10.0ufac\"cm\",1.0ufac\"m\") |> u\"cm\"\n110.00000000000001 cm","category":"page"},{"location":"#Notations","page":"Home","title":"Notations","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package provides tools to access Unitful.jl to define floating point constants for units like cm, kPa, mV etc. called unit factors. These unit factors relate units to their corresponding products of powers of  unitful preferred units in the sense of Unitful.jl. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"By default the unitful preferred units are synonymous with the SI base units. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Example: Unit: kN to representation in powers of SI base units: 1000cdot kgcdot mcdot s^-2  to unit factor: 1000.0","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using LessUnitful\n\njulia> @unitfactors kN\n1000.0","category":"page"},{"location":"","page":"Home","title":"Home","text":"The unit factor  of a quantity like  5cm, 10kPa, 3mV is its numerical value  after conversion to products of powers of unitful preferred units.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Example: Quantity: 3kN to representation in powers of SI base units: 3000cdot kgcdot mcdot s^-2  to unit factor: 3000.0","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using LessUnitful\n\njulia> ufac\"3kN\"\n3000.0","category":"page"},{"location":"","page":"Home","title":"Home","text":"The unitfactor represents the numerical value of a unit/quatity expressed in preferred units:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using LessUnitful, Unitful\n\njulia> unitfactor(u\"cm\")==Unitful.ustrip(Unitful.upreferred(u\"1.0cm\"))\ntrue","category":"page"},{"location":"","page":"Home","title":"Home","text":"Reciprocally, one can make a number \"unitful\", assuming it corresponds to one of the preferred units. Assume x represents an unit factor  of a quantity with respect to the corresponding products of powers of unitful preferred units. Create this quantity and convert it to  unit: ","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using LessUnitful, Unitful\n\njulia> unitful(0.03,u\"cm\")==u\"cm\"(Unitful.float(0.03*Unitful.upreferred(u\"cm\")))\ntrue","category":"page"},{"location":"","page":"Home","title":"Home","text":"Providing these unit factors allows a \"unitless\" workflow with physical data which is characterized by the following aspects:","category":"page"},{"location":"","page":"Home","title":"Home","text":"All calculations are done in numerical values corresponding to unitful preferred units (SI base units by default)\nData input can be performed in at least two different ways:\nDeclare @unitfactors cm and enter e.g. length=10*cm\nEnter \"unitful\" length=10u\"cm\" and actually provide unitfactor(length) to the \"unitless\" code \nData output can go as follows - assume result p is a pressure:\nDeclare @unitfactors kPa and do println(\"p= \",p/kPa,\"kPa\")\nAlternatively, do println(unitful(p,u\"kPa\")), or (with LessUnitful.MoreUnitful): println(p|> u\"kPa\")","category":"page"},{"location":"#Obtaining-unit-factors","page":"Home","title":"Obtaining unit factors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"LessUnitful.unitfactor\n@ufac_str\n@unitfactors\n@local_unitfactors","category":"page"},{"location":"#LessUnitful.unitfactor","page":"Home","title":"LessUnitful.unitfactor","text":"unitfactor(x)\n\nCalculate the unit factor of a quantity or unit x.\n\nExample:\n\njulia> unitfactor(u\"3mV\")\n0.003\njulia> u\"3mV\"|> unitfactor\n0.003\n\njulia> unitfactor(u\"mV\")\n0.001\njulia> u\"mV\"|> unitfactor\n0.001\n\nCompare this with the corresponding calculations with Unitful values:\n\njulia> u\"1mV\" |> u\"V\" |> Unitful.float\n0.001 V\n\nSee unitful for the reciprocal operation:\n\njulia> u\"1cm\" |> unitfactor |> u\"cm\"\n1.0 cm\n\n\n\n\n\n","category":"function"},{"location":"#LessUnitful.@ufac_str","page":"Home","title":"LessUnitful.@ufac_str","text":"@ufac_str\n\nString macro for calculating the unit factor of a quantity or physical constant, see also unitfactor.\n\nExample:\n\njulia> ufac\"1mV\"\n0.001\n\nThis also allows to access  the physical constants q, c0, μ0, ε0, Z0, G, gn, h, ħ, Φ0, me, mn, mp, μB, Na, k, R, σ, R∞ defined in Unitful.jl.\n\nSee  @ph_str  for an alternative way to access physical constants.\n\n\n\n\n\n","category":"macro"},{"location":"#LessUnitful.@unitfactors","page":"Home","title":"LessUnitful.@unitfactors","text":"@unitfactors\n\nDeclare unit factors of units as global constants.\n\nExample\n\njulia> @unitfactors cm;\n\njulia> 3cm\n0.03\n\nWe can declare multiple unit factors at once:\n\n@unitfactors mm cm km A V\n\njulia> @unitfactors cm mm;\n\njulia> cm+mm\n0.011\n\nCompare this with the corresponding calculations with Unitful values:\n\njulia> u\"1cm\"+u\"1mm\"|> float\n0.011 m\n\n\n\n\n\n","category":"macro"},{"location":"#LessUnitful.@local_unitfactors","page":"Home","title":"LessUnitful.@local_unitfactors","text":"@local_unitfactors\n\nDeclare unit factors of units as local variables.\n\nExample\n\nfunction f()\n    @local_unitfactors cm\n    3cm\nend\nf()\n# output\n0.03\n\n\n\n\n\n","category":"macro"},{"location":"#Creating-unitful-values","page":"Home","title":"Creating unitful values","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"unitful(x,unit)","category":"page"},{"location":"#LessUnitful.unitful-Tuple{Any, Any}","page":"Home","title":"LessUnitful.unitful","text":"unitful(x,unit)\n\nMake number x \"unitful\", assuming that the value of x is the expression of the quantity as in preferred units.   This  helps to convert numbers to unitful quantities in a way compatible with unitfactor.\n\nExample\n\njulia> unitful(200,u\"kPa\")\n0.2 kPa\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"LessUnitful.MoreUnitful\nLessUnitful.MoreUnitful.CallableUnit","category":"page"},{"location":"#LessUnitful.MoreUnitful","page":"Home","title":"LessUnitful.MoreUnitful","text":"    MoreUnitful\n\nMake  unitful units callable.\n\nwarning: This submodule commits  a form of type piracy\nThis behavior is not exported by default, but needs to be explicitely  enabled by using LessUnitful.MoreUnitful.  It is not recommended to use this in packages.\n\n\n\n\n\n","category":"module"},{"location":"#LessUnitful.MoreUnitful.CallableUnit","page":"Home","title":"LessUnitful.MoreUnitful.CallableUnit","text":"(unit)(x::Real)\n\nMake number x \"unitful\" by calling unitful.\n\nExample\n\njulia> u\"kPa\"(200)\n0.2 kPa\n\njulia> 200 |> u\"kPa\"\n0.2 kPa\n\nWithout LessUnitful.MoreUnitful, the result of this operation would be:\n\nERROR: DimensionError: kPa and 200 are not dimensionally compatible.\n\nThis may be convenient when printing with units:\n\nInstead of \n\n@unitfactors μA mA;\nx = 15mA\nprintln(x/μA,\" μA\")\n# output\n15000.0 μA\n\none can use \n\n@unitfactors  μA mA\nx = 15mA\nprintln(x|>u\"μA\")  \n# output\n15000.0 μA\n\nSee unitfactor for the reciprocal operation:\n\njulia>  0.05|> u\"cm\" |> unitfactor\n0.05\n\n\n\n\n\n","category":"type"},{"location":"#Physical-constants","page":"Home","title":"Physical constants","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"As already described above, the @ufac_str  macro can be used to extract the values of  physical constants from  PhysicalConstants.CODATA2018.","category":"page"},{"location":"","page":"Home","title":"Home","text":"@ph_str\n@phconstants\n@local_phconstants","category":"page"},{"location":"#LessUnitful.@ph_str","page":"Home","title":"LessUnitful.@ph_str","text":"@ph_str\n\nString macro for calculating the unit factor of a physical constant from PhysicalConstants.CODATA2018\n\njulia> ph\"N_A\"\n6.02214076e23\n\n\n\n\n\n","category":"macro"},{"location":"#LessUnitful.@phconstants","page":"Home","title":"LessUnitful.@phconstants","text":"@phconstants\n\nDeclare numerical values of physical constants as unit factors with respect to  unitful preferred units as constants.  The information is obtained from PhysicalConstants.CODATA2018\n\nExample:\n\njulia> @phconstants N_A\n6.02214076e23\n\nThis is equivalent to\n\nconst N_A = ustrip(upreferred(PhysicalConstants.CODATA2018.N_A))\n\nand we can \"declare\" multiple constants\n\n@phconstants AvogadroConstant c_0\n\n\n\n\n\n","category":"macro"},{"location":"#LessUnitful.@local_phconstants","page":"Home","title":"LessUnitful.@local_phconstants","text":"@local_phconstants\n\nLike @phconstants but declares a local variable.\n\nExample:\n\nfunction f()\n    @local_phconstants N_A\n    N_A\nend\nf()\n# output\n6.02214076e23\n\n\n\n\n\n","category":"macro"},{"location":"#Ensuring-consistency-with-SI-Base-units","page":"Home","title":"Ensuring consistency with SI Base units","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ensureSIBase","category":"page"},{"location":"#LessUnitful.ensureSIBase","page":"Home","title":"LessUnitful.ensureSIBase","text":"ensureSIBase()\n\nEnsure that the preferred units are the SI base units.  Calls to Unitful.preferunits after this will have no effect. \n\njulia> ensureSIBase()\ntrue\n\n\n\n\n\n","category":"function"},{"location":"#Changing-preferred-units","page":"Home","title":"Changing preferred units","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"By calling Unitful.preferunits  the preferred units can be changed from SI base units to e.g. g for mass and cm for length.","category":"page"},{"location":"","page":"Home","title":"Home","text":"In order to be effective, this needs to be called before any invocation of  Unitful.upreferred, and as a consequence, before  any invocation of macros or functions from the LessUnitful package.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Due to this issue for Julia 1.8 it is advised to evaluate at least one of the unit factors from LessUnitful immediately after calling preferunits.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Moreover, while it is convenient to use e.g. @unitfactors in the global scope of a package, it is important to understand that values in global scope are evaluated  during precompilation and cannot be influenced by Unitful.upreferred. Therefore it appears that packages which are designed to work consistently with other defaults than SI base units should  avoid the use of @unitfactors and @phconstants. The use of @local_unitfactors and @local_phconstants, and of @ufac_str, unitfactor, unitful does not suffer from this problem, though.","category":"page"}]
}
